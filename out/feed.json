{
    "version": "https://jsonfeed.org/version/1",
    "title": "rulebox Blog",
    "home_page_url": "https://rulebox.io/blog",
    "feed_url": "https://rulebox.io/blog/feed.json",
    "description": "The latest product news, straight from the development team.",
    "icon": "https://rulebox.io/blog/favicon-32x32.png",
    "author": {
        "name": "Rulebox.io",
        "url": "https://twitter.com/Rulebox_io"
    },
    "items": [
        {
            "id": "Headless UI v1.4: The One With Tabs",
            "content_html": "<div class=\"prose max-w-none\"><p>We just released Headless UI v1.4, which includes a brand new <code>Tab</code> component, and new APIs for manually closing <code>Popover</code> and <code>Disclosure</code> components more easily.</p><a href=\"https://headlessui.dev\"><img src=\"/_next/static/media/banner.9652b1ea7c1c87813c23e89ce326a4b7.jpg\" alt=\"Headless UI v1.4\"/></a><h2>Tabs</h2><p>Earlier this year we started working on <a href=\"https://tailwindui.com/ecommerce\">Tailwind UI Ecommerce</a>, and we realized pretty quickly we were going to need to support tabs in Headless UI to be able to build the new interfaces we were designing.</p><a href=\"https://tailwindui.com/ecommerce\"><img src=\"/_next/static/media/ecommerce-screenie.69fd4ea24ca8c33e74e1f2a54c5e4e37.jpg\" alt=\"Product details interface design from Tailwind UI Ecommerce.\"/></a><p>Here&#x27;s what we ended up with:</p></div><div class=\"my-6 bg-gray-800 rounded-md\"><div class=\"relative space-x-2 px-4 pt-3\" role=\"tablist\" aria-orientation=\"horizontal\"><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">React</button><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">Vue</button></div><div></div></div><div class=\"prose max-w-none\"><p>And yep, those are tabs!</p><p>Like all Headless UI components, this totally abstracts away stuff like keyboard navigation for you so you can create custom tabs in a completely declarative way, without having to think about any of the tricky accessibility details.</p><p><a href=\"https://headlessui.dev/react/tabs\">Check out the documentation</a> to learn more.</p><h3>Closing Disclosures and Popovers</h3><p>Up until now, there was no way to close a <code>Disclosure</code> without clicking the actual button used to open it. For typical disclosure use cases this isn&#x27;t a big deal, but it often makes sense to use disclosures for things like mobile navigation, where you want to close it when someone clicks a link <em>inside</em> of it.</p><p>Now you can use <code>Disclosure.Button</code> or (<code>DisclosureButton</code> in Vue) within your disclosure panel to close the panel, making it easy to wrap up things like links or other buttons so the panel doesn&#x27;t stay open:</p></div><div class=\"my-6 bg-gray-800 rounded-md\"><div class=\"relative space-x-2 px-4 pt-3\" role=\"tablist\" aria-orientation=\"horizontal\"><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">React</button><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">Vue</button></div><div></div></div><div class=\"prose max-w-none\"><p>The same thing works with <code>Popover</code> components, too:</p></div><div class=\"my-6 bg-gray-800 rounded-md\"><div class=\"relative space-x-2 px-4 pt-3\" role=\"tablist\" aria-orientation=\"horizontal\"><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">React</button><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">Vue</button></div><div></div></div><div class=\"prose max-w-none\"><p>If you need finer control, we also pass a <code>close</code> function via the render prop/scoped slot, so you can imperatively close the panel when you need to:</p></div><div class=\"my-6 bg-gray-800 rounded-md\"><div class=\"relative space-x-2 px-4 pt-3\" role=\"tablist\" aria-orientation=\"horizontal\"><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">React</button><button class=\"py-2 px-4 inline-block rounded-md bg-transparent hover:bg-gray-700 text-sm text-white font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-gray-600\" id=\"headlessui-tabs-tab-undefined\" role=\"tab\" type=\"button\" aria-selected=\"false\" tabindex=\"-1\">Vue</button></div><div></div></div><div class=\"prose max-w-none\"><p>For more details, check out the updated <a href=\"https://headlessui.dev/react/popover#closing-popovers-manually\">Popover</a> and <a href=\"https://headlessui.dev/react/disclosure#closing-disclosures-manually\">Disclosure</a> documentation.</p><h2>Try it out</h2><p>Headless UI v1.4 is a minor update so there are no breaking changes. To upgrade, just install the latest version via npm:</p><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># For React</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @headlessui/react\n\n<span class=\"token comment\"># For Vue</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @headlessui/vue</code></pre><p>Check out <a href=\"https://headlessui.dev\">the official website</a> for the latest documentation, and check out <a href=\"https://tailwindui.com\">Tailwind UI</a> if you want to play tons of styled examples.</p></div><p><em>(The post <a href=\"https://rulebox.io/blog/headless-ui-v1-4\">Headless UI v1.4: The One With Tabs</a> appeared first on <a href=\"https://rulebox.io/blog\">rulebox Blog</a>.)</em></p>",
            "url": "/headless-ui-v1-4",
            "title": "Headless UI v1.4: The One With Tabs",
            "summary": "We just released Headless UI v1.4, which includes a brand new `Tab` component, and new APIs for manually closing `Popover` and `Disclosure` components more easily.",
            "image": "https://rulebox.io/blog/_next/static/media/card.2d8171220c44da279fad673d73b77a72.jpg",
            "date_modified": "2021-07-29T12:00:00.000Z",
            "author": {
                "name": "James Wilson",
                "url": "https://twitter.com/jwilson92"
            }
        },
        {
            "id": "Introducing Tailwind Play",
            "content_html": "<div class=\"prose max-w-none\"><p>To get the most out of Tailwind, you need a build step. It&#x27;s the only way to be able to customize your <a href=\"https://tailwindcss.com/docs/configuration\"><code>tailwind.config.js</code></a> file, extract components with <a href=\"https://tailwindcss.com/docs/functions-and-directives#apply\"><code>@apply</code></a>, or include <a href=\"https://tailwindcss.com/docs/plugins\">plugins</a>.</p><p>This isn&#x27;t a problem if you&#x27;ve already bought in to the framework, but if you&#x27;re just trying to kick the tires for the first time it&#x27;s a lot of friction. You either have to set up a local development environment with PostCSS support, or stick to the static CDN build, which means you lose out on lots of cool features.</p><p>So today we&#x27;re excited to release the first version of <a href=\"https://play.tailwindcss.com\"><strong>Tailwind Play</strong></a>, an advanced online playground for Tailwind CSS that lets you use all of Tailwind&#x27;s build-time features directly in the browser.</p><div class=\"my-8 aspect-w-16 aspect-h-9\"><iframe src=\"https://www.youtube.com/embed/eCWhTZ34Hck\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></div><p>It includes support for all of Tailwind&#x27;s coolest features, plus tons of stuff that&#x27;s even better in Tailwind Play than it is in your editor, like:</p><ul><li>Customizing your Tailwind theme</li><li>Enabling special variants, like <code>group-hover</code> or <code>focus-within</code></li><li>Using custom directives in your CSS like <code>@apply</code>, <code>@variants</code>, and <code>@responsive</code></li><li>Adding plugins like <code>@tailwindcss/typography</code></li><li>Intelligent code completion and linting</li><li>Responsive design mode</li><li>One-click sharing</li></ul><p>The code completion even updates the rendered preview in <em>real-time</em>, which creates an incredible design workflow in the browser — just navigate through different padding utilities with the arrow keys for example to find the perfect value without ever saving the file or even hitting enter!</p><p>Our responsive design mode that lets you fine-tune the viewport while you&#x27;re working on your design, just like you can in Chrome DevTools. You can even drag the viewport beyond the available space, and the preview area will automatically zoom out, letting you design for larger screens even when you have limited space.</p><p>One-click sharing really is just that — you don&#x27;t even need to create an account. Click &quot;Share&quot; and you&#x27;ve immediately got a link to a snapshot of what you&#x27;re working on that you can share online.</p><p><strong>Check it out at <a href=\"https://play.tailwindcss.com\">play.tailwindcss.com</a></strong> and let us know what you think!</p></div><p><em>(The post <a href=\"https://rulebox.io/blog/introducing-tailwind-play\">Introducing Tailwind Play</a> appeared first on <a href=\"https://rulebox.io/blog\">rulebox Blog</a>.)</em></p>",
            "url": "/introducing-tailwind-play",
            "title": "Introducing Tailwind Play",
            "summary": "Tailwind Play is an advanced online playground for Tailwind CSS that lets you use all of Tailwind's build-time features directly in the browser.",
            "image": "https://rulebox.io/blog/_next/static/media/card.eca2e0b364c20a23b42f6bb247f17149.jpg",
            "date_modified": "2020-10-07T13:00:00.000Z",
            "author": {
                "name": "James Wilson",
                "url": "https://twitter.com/jwilson92"
            },
            "_comments": {
                "about": "Link to discussion forum",
                "comments": "https://github.com/tailwindlabs/tailwindcss/discussions/2511"
            }
        },
        {
            "id": "Utility-Friendly Transitions with @tailwindui/react",
            "content_html": "<div class=\"prose max-w-none\"><p>Back in February we released <a href=\"https://tailwindui.com\">Tailwind UI</a>, a directory of HTML component examples designed for you to copy and paste into your Tailwind projects as a starting point for your own designs.</p><p>We built Tailwind UI as an HTML-only, bring-your-own-JS product to make it as universal as possible, but many designs are inherently interactive and porting those interactive behaviors between JavaScript frameworks is unfortunately not always very easy.</p><p>One example of this is enter/leave transitions, like when you toggle a dropdown menu and see it fade in and out.</p><p>Vue.js has a really neat <code>&lt;transition&gt;</code> component for enter/leave transitions with a very utility-friendly API:</p><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span>\n  <span class=\"token attr-name\">enter-active-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>transition-opacity duration-75<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">enter-from-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-0<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">enter-to-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-100<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">leave-active-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>transition-opacity duration-150<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">leave-from-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-100<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">leave-to-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-0<span class=\"token punctuation\">&quot;</span></span>\n<span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>isShowing<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Will fade in and out --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">&gt;</span></span></code></pre><p>But replicating this in React turns out to be much more difficult, because until now there hasn&#x27;t been a library designed to support utility-driven transition styling.</p><p><strong>So earlier this week, we released the very first version of <a href=\"https://github.com/tailwindlabs/tailwindui-react\">@tailwindui/react</a>, a library that provides low-level primitives for turning utility-first HTML into fully interactive UIs.</strong></p><p>We&#x27;ll be adding many more components in the coming months <em>(like dropdowns, toggles, modals, and more, and for Vue too!)</em> but thought we&#x27;d start with a <code>&lt;Transition&gt;</code> component to at least get the current Tailwind UI experience for React users up to par with what&#x27;s possible in Vue and Alpine.js.</p><p>Here&#x27;s what it looks like to use:</p><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Transition</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@tailwindui/react&#x27;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;react&#x27;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">MyComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isOpen<span class=\"token punctuation\">,</span> setIsOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token function\">setIsOpen</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOpen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Toggle</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Transition</span></span>\n        <span class=\"token attr-name\">show</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>isOpen<span class=\"token punctuation\">}</span></span>\n        <span class=\"token attr-name\">enter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>transition-opacity duration-75<span class=\"token punctuation\">&quot;</span></span>\n        <span class=\"token attr-name\">enterFrom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-0<span class=\"token punctuation\">&quot;</span></span>\n        <span class=\"token attr-name\">enterTo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-100<span class=\"token punctuation\">&quot;</span></span>\n        <span class=\"token attr-name\">leave</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>transition-opacity duration-150<span class=\"token punctuation\">&quot;</span></span>\n        <span class=\"token attr-name\">leaveFrom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-100<span class=\"token punctuation\">&quot;</span></span>\n        <span class=\"token attr-name\">leaveTo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>opacity-0<span class=\"token punctuation\">&quot;</span></span>\n      <span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* Will fade in and out */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Transition</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre><p><a href=\"https://github.com/tailwindlabs/tailwindui-react\">Read the documentation</a> to learn more about advanced functionality, like:</p><ul><li>Rendering without an extra DOM element</li><li>Co-ordinating related transitions</li><li>Transitioning on initial mount.</li></ul><p>Check it out in action in this CodeSandbox demo:</p><iframe src=\"https://codesandbox.io/embed/dreamy-villani-1lz49?fontsize=14&amp;hidenavigation=1&amp;module=%2Fsrc%2FApp.js&amp;view=preview\" style=\"height:500px\" class=\"w-full rounded-md overflow-hidden\" title=\"dreamy-villani-1lz49\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe><p>Try it out on your projects, and if you run into any problems, <a href=\"https://github.com/tailwindlabs/tailwindui-react\">report an issue on GitHub</a>.</p></div><p><em>(The post <a href=\"https://rulebox.io/blog/utility-friendly-transitions-with-tailwindui-react\">Utility-Friendly Transitions with @tailwindui/react</a> appeared first on <a href=\"https://rulebox.io/blog\">rulebox Blog</a>.)</em></p>",
            "url": "/utility-friendly-transitions-with-tailwindui-react",
            "title": "Utility-Friendly Transitions with @tailwindui/react",
            "summary": "Announcing the first release of @tailwindui/react, which introduces a <Transition> component for utility-first enter/leave transitions.",
            "image": "https://rulebox.io/blog/_next/static/media/card.816e75ac48ca1cba2b58b834a8df9063.jpg",
            "date_modified": "2020-08-27T18:30:00.000Z",
            "author": {
                "name": "James Wilson",
                "url": "https://twitter.com/jwilson92"
            },
            "_comments": {
                "about": "Link to discussion forum",
                "comments": "https://github.com/tailwindlabs/tailwindcss/discussions/2262"
            }
        }
    ]
}